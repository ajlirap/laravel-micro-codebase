APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:F6hZoKJT6i6MD12a9VJ6T/EgWK62In2RLzqvRrePNpU=
APP_DEBUG=true
APP_URL=http://localhost

APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

PHP_CLI_SERVER_WORKERS=4

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=sqlite
# DB_HOST=127.0.0.1
# DB_PORT=3306
# DB_DATABASE=laravel
# DB_USERNAME=root
# DB_PASSWORD=

SESSION_DRIVER=database
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

BROADCAST_CONNECTION=log
FILESYSTEM_DISK=local
QUEUE_CONNECTION=rabbitmq
RABBITMQ_HOST=127.0.0.1
RABBITMQ_PORT=5672
RABBITMQ_USER=guest
RABBITMQ_PASSWORD=guest
RABBITMQ_VHOST=/
RABBITMQ_EXCHANGE=app.exchange
RABBITMQ_EXCHANGE_TYPE=topic
RABBITMQ_ROUTING_KEY=#
RABBITMQ_QUEUE=app.queue
RABBITMQ_DLX=app.dlx
RABBITMQ_DLX_ROUTING_KEY=dead
RABBITMQ_HEARTBEAT=30
RABBITMQ_QUEUE_MAX_PRIORITY=10
RABBITMQ_RETRY_AFTER=120
RABBITMQ_SSL_VERIFY_PEER=true
RABBITMQ_SSL_VERIFY_PEER_NAME=true
# RABBITMQ_SSL_CAFILE=
# RABBITMQ_SSL_LOCALCERT=
# RABBITMQ_SSL_LOCALKEY=
# RABBITMQ_SSL_PASSPHRASE=

CACHE_STORE=database
# CACHE_PREFIX=

MEMCACHED_HOST=127.0.0.1

REDIS_CLIENT=phpredis
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=log
MAIL_SCHEME=null
MAIL_HOST=127.0.0.1
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

VITE_APP_NAME="${APP_NAME}"

# ------------------------------------------------------------
# Azure AD / JWT Resource Server (for incoming Bearer tokens)
# Configure these if you want to protect /api/v1/secure/* routes using Azure AD issued JWTs.
# Replace <tenant_id> and <app_id_uri_or_client_id> with your values.
# For Azure AD (Entra ID) v2 endpoints:
AUTH_JWKS_URL=https://login.microsoftonline.com/<tenant_id>/discovery/v2.0/keys
AUTH_EXPECTED_ISS=https://login.microsoftonline.com/<tenant_id>/v2.0
# Expected audience: Application (client) ID or the App ID URI (e.g., api://<app_id>)
AUTH_EXPECTED_AUD=<app_id_uri_or_client_id>
AUTH_ACCEPTED_ALGS=RS256
AUTH_CACHE_TTL_SECONDS=3600
# Optional: allow small clock skew when validating exp/nbf/iat (seconds)
AUTH_LEEWAY_SECONDS=0
# Optional: if signature fails but exp is in the past, report as expired (dev aid)
AUTH_PREFER_EXP_REASON=false

# If you use Azure AD B2C, use these forms instead (uncomment and set):
# AUTH_JWKS_URL=https://<tenant>.b2clogin.com/<tenant>.onmicrosoft.com/<policy>/discovery/v2.0/keys
# AUTH_EXPECTED_ISS=https://<tenant>.b2clogin.com/<tenant>.onmicrosoft.com/<policy>/v2.0/

# ------------------------------------------------------------
# Azure AD / OAuth2 Client Credentials (for outbound calls, optional)
# Only needed if this service must call other protected APIs.
# Token URL for standard Azure AD (Entra ID) v2:
OAUTH2_TOKEN_URL=https://login.microsoftonline.com/<tenant_id>/oauth2/v2.0/token
OAUTH2_CLIENT_ID=
OAUTH2_CLIENT_SECRET=
# Scopes: for application permissions typically use the ".default" scope of the target API
# e.g., api://<target_app_id>/.default (spaceâ€‘separate multiple scopes if needed)
OAUTH2_SCOPES=
# Audience (optional, if the target API expects a specific aud)
OAUTH2_AUDIENCE=
OAUTH2_CACHE_TTL_SECONDS=300

# Example target API specific scopes (optional; used by config.http.targets.example)
# EXAMPLE_API_SCOPES=api://<target_app_id>/.default

# ------------------------------------------------------------
# Local Dev JWT keys (for minting test tokens and serving JWKS)
# Generate a keypair for local only (do not commit real secrets):
#   openssl genrsa -out storage/keys/dev-jwt.key 2048
#   openssl rsa -in storage/keys/dev-jwt.key -pubout -out storage/keys/dev-jwt.pub
DEV_JWT_PRIVATE_KEY_PATH=storage/keys/dev-jwt.key
DEV_JWT_PUBLIC_KEY_PATH=storage/keys/dev-jwt.pub
DEV_JWT_KEY_PASSPHRASE=
DEV_JWT_KID=dev-key-1

# For fully local testing, you can point the app to your local JWKS and claims
# AUTH_JWKS_URL=http://localhost:8000/api/v1/dev/jwks
# AUTH_EXPECTED_ISS=http://localhost
# AUTH_EXPECTED_AUD=local-api
